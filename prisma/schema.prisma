generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.5.2")]
}

model Customer {
  id         String                                @id @default(uuid())
  username   String?
  email      String                                @unique
  // password String
  location   Unsupported("geometry(Point, 4326)")? //if cutomer doesn't give location permission
  supabaseId String                                @unique

  vehicles     Vehicle[]
  valetTickets ValetTicket[]
}

model Provider {
  id       String  @id @default(uuid())
  name     String  @unique
  email    String? @unique
  phone    String //may not be needed.
  hasValet Boolean

  supabaseId String @unique

  employees   Employee[]
  lots        Lot[]
  invitations Invitation[]
  settings    ProviderSetting[]
}

enum Role {
  Valet
  Admin
}

model Employee {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  role       Role
  phone      String
  createdAt  DateTime @default(now())
  supabaseId String   @unique

  lotId String?
  lot   Lot?    @relation(fields: [lotId], references: [id])

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])

  valetTickets ValetTicket[]
}

model Invitation {
  id        String   @id @default(uuid())
  email     String
  role      Role
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  //might remove later
  lotId String?
  lot   Lot?    @relation(fields: [lotId], references: [id])

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])
}

model Lot {
  id        String                                @id @default(uuid())
  name      String
  capacity  Int
  location  Unsupported("GEOGRAPHY(POINT, 4326)")
  address   String?
  createdAt DateTime                              @default(now())
  updatedAt DateTime                              @updatedAt

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])

  spots       Spot[]
  invitations Invitation[]
  employees   Employee[]

  @@index([location], name: "location_idx", type: Gist)
}

model Spot {
  id             String          @id @default(uuid())
  name           String
  floor          Int
  price          Decimal?
  status         SpotStatus      @default(Available)
  occupationType OccupationType?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  lotId String
  lot   Lot    @relation(fields: [lotId], references: [id])

  entryTickets EntryTicket[]

  reservations Reservation[]
}

enum OccupationType {
  RESERVATION
  NONRESERVATION
}

enum SpotStatus {
  Available
  Reserved
  Occupied
}

model Vehicle {
  id                 String    @id @default(uuid())
  licensePlateNumber String    @unique
  make               String?
  model              String?
  color              String?
  deletedAt          DateTime?

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  // should this be one to one
  entryTickets EntryTicket?
  reservations Reservation[]
  valetTickets ValetTicket[]
}

model Reservation {
  id           String            @id @default(uuid())
  startTime    DateTime
  endTime      DateTime
  arrivalTime  DateTime?
  status       ReservationStatus
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  cancelledAt  DateTime?
  licensePlate String

  spotId String
  spot   Spot   @relation(fields: [spotId], references: [id])

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
}

enum ReservationStatus {
  COMPLETE
  CANCELLED
  ACTIVE
}

model EntryTicket {
  id           String            @id @default(uuid())
  phoneNumber  String
  licensePlate String
  entryTime    DateTime
  exitTime     DateTime?
  status       EntryTicketStatus @default(ACTIVE)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  cancelledAt  DateTime?
  isPaid       Boolean           @default(false)

  spotId String
  spot   Spot   @relation(fields: [spotId], references: [id])

  vehicleId String  @unique
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
}

enum EntryTicketStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

model ProviderSetting {
  id        String   @id @default(uuid())
  name      String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])
}

model ProviderDefaultSetting {
  id        String   @id @default(uuid())
  name      String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ValetTicket {
  id            String   @id @default(uuid())
  issuedAt      DateTime @default(now())
  customerEmail String?

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  issuedBy String
  issuer   Employee @relation(fields: [issuedBy], references: [id])

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
}
