openapi: 3.0.0
info:
  title: Nova API
  description: API documentation for Nova Parking System.
  version: 1.0.0

servers:
  - url: http://localhost:5000/v1
    description: Local development server
  - url: https://6jm979tt-5000.euw.devtunnels.ms/v1
    description: Azure Dev Tunnel server

tags:
  - name: "customer"
    description: "Endpoints related to Customer"
  - name: "provider"
    description: "Endpoints related to Provider"
  - name: "lot"
    description: "Endpoints related to lots"
  - name: "spot"
    description: "Endpoints related to spots"
  - name: "zone"
    description: "Endpoints related to zones"
  - name: "vehicle"
    description: "Endpoints related to vehicles"
  - name: "alert"
    description: "Endpoints related to alerts"
  - name: "reservation"
    description: "Endpoints related to reservations"
  - name: "valet-parking"
    description: "Endpoints related to valet parking"
  - name: "review"
    description: "Endpoints related to reviews"

paths:
# Customer Endpoints
  /customer/auth/signup:
    post:
      tags:
        - customer
      summary: (customer)Register a new customer
      description: Registers a new customer with an email, password, and optional username.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: custone@gmail.com
                password:
                  type: string
                  format: password
                  example: "12345678"
                username:
                  type: string
                  example: "user123"
      responses:
        "201":
          description: Successfully registered customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "12345"
                  email:
                    type: string
                    example: "user@example.com"
                  username:
                    type: string
                    example: "user123"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "400":
          $ref: "#/components/responses/400"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /customer/auth/login:
    post:
      tags:
        - customer
      summary: (customer)Authenticate an existing customer
      description: Logs in a customer by validating their email and password. Returns a JWT token upon success.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: custone@gmail.com
                password:
                  type: string
                  format: password
                  example: "12345678"
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "Login successful."
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

# Employee Endpoints  
  /employees/auth/register:
    post:
      tags:
        - provider
      summary: Register a provider and automatically logs the employee in.
      description: Registers a new provider and an admin for that provider. The employee is automatically logged in. 
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProviderRegisterRequest"
      responses:
        "201":
          description: Successfully registered provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderRegisterResponse"   
        "400": 
            $ref: "#/components/responses/400"
        "409": 
            $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /employees/auth/login:
    post:
      tags:
        - provider
      summary: Authenticate an employee
      description: Logs in an employee by validating their email and password. Returns a JWT token upon success.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example:  empone@gmail.com
                password: 
                  type: string
                  format: password
                  example: "12345678"
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "Login successful."
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /employees/invite:
    post:
      tags:
        - provider
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: Invite a provider employee
      description: Invites a new employee to a provider. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"  
                role:
                  type: string
                  enum: [Admin, Valet, Attendant]
                  example: "admin"
                lot:
                  type: string
                  format: uuid
              required:
                - email
                - role
      responses:
        "200":
          description: Successfully invited employee
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Employee invited successfully."
        "400":
          $ref: "#/components/responses/400"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"  
  /employees:
    get: 
      tags:
        - provider
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: query
          name: lotId
          required: false
          schema:
            type: string
      summary: Get all employees of a provider
      description: Returns all employees of a provider.
      responses:
        "200":
          description: Successfully retrieved employees
          content:
            application/json:
              schema:
                type: object
                properties:                  
                  count:
                    type: integer
                    example: 10
                  employees:
                    type: array
                    items:
                      $ref: "#/components/schemas/Employee"
        "404":
          $ref: "#/components/responses/404"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
    post:
      tags:
        - provider
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string 
      summary: Sign up for an invited employee
      description: To sign up for an invited employee, the employee must provide their name, email, and password. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                  format: phone
                password:
                  type: string
                  format: password
                confirmPassword:
                  type: string
                  format: password
      responses:
        "201":
          description: Successfully registered employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "409": 
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /employees/send-reset:
    post:
      tags:
        - provider
      summary: Send password reset email
      description: Sends a password reset email to the employee's email address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "abc@gmail.com"
      responses:
        "200":
          description: Successfully sent password reset email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset email sent successfully."
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

# Provider Endpoints 
  /provider/{provId}/lots:
    get:
      deprecated: true
      tags:
        - lot
      security:
        - BearerAuth: []
      summary: Get all parking lots for a provider
      description: Returns all parking lots for a provider.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: provId
          description: The ID of the provider
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved parking lots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lot"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

# Lot Endpoints 
  #TODO: Remove the ability to create spots
  /lots:
    get:
      tags:
        - lot
      security:
        - BearerAuth: []
      summary: Get all parking lots of the authenticated provider
      description: Returns all parking lots of the authenticated provider.
      parameters:
        - $ref: "#/components/parameters/XClientType"
      responses:
        "200":
          description: Successfully retrieved parking lots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LotWithDetails"
        "500":
          $ref: "#/components/responses/500"  
    post:
      tags:
        - lot
      security:
        - BearerAuth: []    
      summary: Create a new lot
      description: Creates a new parking lot for a provider
      parameters:
        - $ref: "#/components/parameters/XClientType"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Parking Lot 1"
                capacity:
                  type: integer
                  example: 100
                description:
                  type: string
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                      format: float
                      example: 37.7749
                    longitude:
                      type: number
                      format: float
                      example: -122.4194
                hasValet:
                  type: boolean
                  example: false
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: The images of the lot
            encoding:
              images:
                contentType: application/octet-stream 
      responses:
        "201":
          description: Successfully created parking lot
          content:
            application/json::
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "12345"
                  name:
                    type: string
                    example: "Parking Lot 1"
                  capacity:
                    type: integer
                    example: 100
                  hasValet:
                    type: boolean
                    example: false
                  location: 
                    type: object
                    properties:
                      latitude:
                        type: number
                        format: float
                        example: 37.7749
                      longitude:
                        type: number
                        format: float
                        example: -122.4194       
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"  
  /lots/{lotId}:
    patch:
      tags:
        - lot
      security:
        - BearerAuth: []
      summary: Update a parking lot
      description: Updates a parking lot by ID.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: lotId
          description: The ID of the parking lot
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Parking Lot 1 Updated"
                capacity:
                  type: integer
                  example: 120
                description:
                  type: string
                hasValet:
                  type: boolean
                  example: false
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: The images of the lot
            encoding:
              images:
                contentType: application/octet-stream
      responses:
        "200":
          description: Successfully updated parking lot
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /lots/nearby:
    get:
      tags:
        - lot
      security:
        - BearerAuth: []
      summary: Get nearby parking lots
      description: Retrieve parking lots within a specified radius from a given location.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: query
          name: latitude
          required: true
          schema:
            type: number
            format: float
          description: Latitude of the location.
        - in: query
          name: longitude
          required: true
          schema:
            type: number
            format: float
          description: Longitude of the location.
        - in: query
          name: radius
          schema:
            type: number
            default: 500
          description: Radius in meters to search for parking lots. Defaults to 500 meters.
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [distance, price]
            default: distance
          description: Sort the results by distance or price. Defaults to distance.
      responses:
        "200":
          description: Successfully retrieved nearby parking lots
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 5
                  lots:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "12345"
                        name:
                          type: string
                          example: "Parking Lot A"
                        longitude:
                          type: number
                          example: -122.4194
                        latitude:
                          type: number
                          example: 37.7749
                        description:
                          type: string
                          example: "A spacious parking lot with ample space."
                        hasValet:
                          type: boolean
                          example: false
                        rating:
                          type: number
                          format: float
                          example: 4.5
                        address:
                          type: string
                          example: "123 Main St, San Francisco, CA 94105"
                        distance:
                          type: number
                          example: 450
                          description: (optional)Distance in meters from the given location.
                        images:
                          type: array
                          items:
                            type: string
                            format: uri
                            example: "Img3423.jpg"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  /lots/{lotId}/favorite:
    post:
      tags:
        - lot
      security:
        - BearerAuth: []
      summary: Favorite a parking lot
      description: Allows a customer to favorite a parking lot.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: lotId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: Successfully favorited the lot
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lot favorited successfully."
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - lot
      security:
        - BearerAuth: []
      summary: Unfavorite a parking lot
      description: Allows a customer to unfavorite a parking lot.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: lotId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully unfavorited the lot
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lot unfavorited successfully."
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
    get:
      tags:
        - lot
      security:
        - BearerAuth: []
      summary: Check if a parking lot is favorited
      description: Checks if a parking lot is favorited by the authenticated customer.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: lotId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully checked if the lot is favorited
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFavorited:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  /lots/favorites:
    get:
      tags:
        - lot
      security:
        - BearerAuth: []
      summary: Get favorite lots
      description: Retrieve all favorite parking lots for the authenticated customer.
      parameters:
        - $ref: "#/components/parameters/XClientType"
      responses:
        "200":
          description: Successfully retrieved favorite lots
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                    capacity:
                      type: integer
                    description:
                      type: string
                    hasValet:
                      type: boolean
                    images:
                      type: array
                      items:
                        type: string
                    address:
                      type: string
                      example: "123 Main St, San Francisco, CA 94105"
        "500":
          $ref: "#/components/responses/500"
  
# Zone Endpoints
# TODO: get EndPt: Yet to be implemented - High priority
  /lots/{lotId}/zones:
    get:
      tags:
        - zone
      security:
        - BearerAuth: []
      summary: Get all zones for a parking lot
      description: Returns all zones for a parking lot.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: lotId
          description: The ID of the parking lot
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved parking zones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lot"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    post:
      tags:
        - zone
      security:
        - BearerAuth: []
      summary: Create a new zone for an exsiting parking lot 
      description: Creates a new zone for a parking lot.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: lotId
          description: The ID of the parking lot
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/ZoneCreateRequest"
      responses:
        "201":
          description: Successfully created region
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lot"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  /zones/{zoneId}:
    get:
      tags:
        - zone
      security:
        - BearerAuth: []
      summary: Get a zone by ID
      description: Fetches details of a specific zone by its ID.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: zoneId
          description: The ID of the zone
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved zone details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  vehicleType:
                    type: string
                    nullable: true
                  totalNumberOfSpots:
                    type: integer
                  spots:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        floor:
                          type: integer
                        status:
                          type: string
                          enum: [Available, Reserved, Occupied]
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

# Spot Endpoints 
  /spots:
    post:
      tags:
        - spot
      security:
        - BearerAuth: []
      summary: Create new parking spot/s
      description: Creates new parking spot/s for a parking lot.
      parameters:
        - $ref: "#/components/parameters/XClientType"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "P"
                number:
                  type: integer
                  example: 1
                floor:
                  type: integer
                  example: 1
                startingNumber:
                  type: string
                  nullable: true
                  example: 1
                zoneId:
                  type: string
                  example: "12345"
      responses:
        "201":
          description: Successfully created parking spot
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  spot:
                    $ref: "#/components/schemas/Spot"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  /spots/{spotId}:
    get:
      tags:
        - spot
      security:
        - BearerAuth: []
      summary: Get a parking spot
      description: Returns a parking spot by ID.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: spotId
          description: The ID of the parking spot
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved parking spot
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Spot"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    patch:
      tags:
        - spot
      security:
        - BearerAuth: []
      summary: Update a parking spot
      description: Updates a parking spot by ID.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: spotId
          description: The ID of the parking spot
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "P1"
                floor:
                  type: integer
                  example: 1
                # status:
                #   type: string
                #   enum: [available, occupied, reserved]
                #   example: "occupied"
      responses:
        "200":
          description: Successfully updated parking spot
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Spot"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
# TODO: Below EndPts: Yet to be implemented - High priority
  /zones/{zoneId}/spots:
    get:
      tags:
        - spot
      security:
        - BearerAuth: []
      summary: Get all spots for a zone
      description: Returns all parking spots for a zone.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: zoneId
          description: The ID of the zone
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved parking spots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Spot"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  /lots/{lotId}/spots:
    get:
      tags:
        - spot
      security:
        - BearerAuth: []
      summary: Get all spots for a parking lot
      description: Returns all parking spots for a parking lot.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: lotId
          description: The ID of the parking lot
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved parking spots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Spot"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

# Reservation Endpoints  
  /reservations:
    post:
      tags:
        - reservation
      security:
        - BearerAuth: []
      summary: Reserve a parking spot
      description: Reserves a parking spot by ID.
      parameters:
        - $ref: "#/components/parameters/XClientType"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicleId:
                  type: string
                  format: uuid
                zoneId:
                  type: string
                  format: uuid
                startTime:
                  type: string
                  format: date-time
                  example: "2025-04-16T12:00:00Z"
                endTime:
                  type: string
                  format: date-time
                  example: "2025-04-16T13:00:00Z"
                lotId:
                  type: string
                  format: uuid
                requestedValet:
                  type: boolean
                  example: false
      responses:
        "201":
          description: Successfully reserved parking spot
          content:
            application/json:
              #change this
              schema:
                $ref: "#/components/schemas/Spot"
        "400":
          $ref: "#/components/responses/400"
        "409":
          $ref: "#/components/responses/409"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    get:
      x-client-type: "web"
      tags:
        - reservation
      security:
        - BearerAuth: []
      summary: (Provider)Get all reservations
      description: Returns all reservations.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        # - in: query
        #   name: on 
        #   description: Criteria to filter reservations
        #   required: false
        #   schema:
        #     type: string
        #     enum: [lot]
        # - in: query
        #   name: value
        #   description: Search string
        #   required: false
        #   schema:
        #     type: string
        #     format: uuid
        - in: query
          name: status
          description: Status of the reservation
          required: false
          schema:
            type: string
            enum: [active, cancelled, complete]
        - in: query
          name: from
          description: From time
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          description: To time
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: lotId
          description: The ID of the parking lot
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: zoneId
          description: The ID of the zone
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: limit
          description: The number of reservations to return
          required: false
          schema:
            type: integer
            default: 10
        - in: query
          name: offset
          description: The number of reservations to skip
          required: false
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successfully retrieved reservations
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ReservationFetchResponse"  
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /reservations/{id}:  
    delete:
      tags:
        - reservation
      security:
        - BearerAuth: []
      summary: Cancel a reservation
      description: Cancels a reservation by ID.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: id
          description: The ID of the reservation
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Successfully canceled reservation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Spot"
        "400":
          $ref: "#/components/responses/400"
        "404":  
          $ref: "#/components/responses/404"  
        "500":
          $ref: "#/components/responses/500" 
  /reservations/history:
    get:
      tags:
        - reservation
      security:
        - BearerAuth: []
      summary: Get reservation history
      description: Returns the reservation history for a customer.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: query
          name: limit
          description: The number of reservations to return
          required: false
          schema:
            type: integer
            default: 10
        - in: query
          name: offset
          description: The number of reservations to skip
          required: false
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successfully retrieved reservation history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reservation"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

#TODO: Test this 
  /vehicles/{vehicleId}/reservations:
    get:
      tags:
        - reservation
      security:
        - BearerAuth: []
      summary: Get all reservations for a vehicle
      description: Returns all reservations for a vehicle.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: vehicleId
          description: The ID of the vehicle
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved reservations for the vehicle
          content:
            application/json:
              schema:
                type: array
                # items:
                  # $ref: "#/components/schemas/Reservation"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

# Vehicle Endpoints
  /vehicles:
    get:
      tags:
        - vehicle
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: Get vehicles of a particulat customer
      description: Returns all vehicles for a customer.
      responses:
        "200":
          description: Successfully retrieved vehicles of the cusomter
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    post:
      tags:
        - vehicle
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: Create a new vehicle
      description: Creates a new vehicle for a customer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                make:
                  type: string
                  example: "Toyota"
                model:
                  type: string
                  example: "Camry"
                color:
                  type: string
                  example: "Black"
                licensePlateNumber:
                  type: string
                  example: "1AAB45323"
      responses:
        "201":
          description: Successfully created vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  /vehicles/{vehicleId}:
    get:
      tags:
        - vehicle
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
            format: uuid
      summary: Get a specific vehicle
      description: Fetches a specific vehicle for a customer.
      responses:
        "200":
          description: Successfully retrieved the vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - vehicle
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
            format: uuid
      summary: Delete a vehicle
      description: Delete a vehicle for a customer.
      responses:
        "200":
          description: Successfully deleted the vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

# Alert Endpoints
  /alerts:
    get:
      tags:
        - alert
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: query
          name: lotId 
          description: The ID of the parking lot
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: zoneId 
          description: The ID of the zone
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: type
          description: Type of alert to filter by
          required: false
          schema:
            type: string
            enum: [reservationExpiry, ] #add more types as needed
        - in: query
          name: limit
          description: The number of alerts to return
          required: false
          schema:
            type: integer
            default: 10
        - in: query
          name: offset
          description: The number of alerts to skip
          required: false
          schema:
            type: integer
            default: 0
      summary: Get all alerts 
      description: Returns all alerts .
      responses:
        "200":
          description: Successfully retrieved alerts 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Alert"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

# Review Endpoints
  /reviews:
    get:
      tags:
        - review
      security:
        - BearerAuth: []
      summary: Retrieve reviews for a specific lot
      description: Allows customers and providers to retrieve reviews for a specific parking lot.
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: query
          name: lotId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the parking lot to retrieve reviews for.
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of reviews to retrieve.
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of reviews to skip.
      responses:
        "200":
          description: Successfully retrieved reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 2
                  averageRating:
                    type: integer
                    example: 3
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "913f16fc-e347-4a21-95c1-f174b42a58ba"
                        rating:
                          type: integer
                          example: 4
                        comment:
                          type: string
                          example: "Fuck the manager!"
                        createdAt:
                          type: string
                          format: date-time
                          example: "2025-06-09T07:37:41.804Z"
                        updatedAt:
                          type: string
                          format: date-time
                          example: "2025-06-09T07:37:41.804Z"
                        customerId:
                          type: string
                          example: "e7500e15-4246-47b2-b90d-cdc4920c3c55"
                        lotId:
                          type: string
                          example: "917f0c76-b727-42a8-a065-1afcd7e55e82"
                        customer:
                          type: object
                          properties:
                            username:
                              type: string
                              example: "user123"
                            email:
                              type: string
                              example: "custone@gmail.com"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
    post:
      tags:
        - review
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: Create a new review
      description: Allows a customer to create a review for a parking lot.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lotId:
                  type: string
                  format: uuid
                  example: "12345"
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 4
                comment:
                  type: string
                  example: "Great parking experience!"
      responses:
        "201":
          description: Successfully created review
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "67890"
                  lotId:
                    type: string
                    example: "12345"
                  rating:
                    type: integer
                    example: 4
                  comment:
                    type: string
                    example: "Great parking experience!"
                  createdAt:
                    type: string
                    format: date-time
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

 # Entry/Exit Endpoints
  /vehicles/entry/walk-in:
    post:
      tags:
        - vehicle
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: (provider)Record vehicle entry
      description: Records the entry of a vehicle into a parking lot.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                zoneId:
                  type: string
                  format: uuid
                lotId: 
                  type: string
                  format: uuid
                phoneNumber:
                  type: string
                  example: 0912131415
                licensePlate:
                  type: string
                  example: 1AAB45323
                vehicle: 
                  type: object
                  properties:
                    make:
                      type: string
                    model:
                      type: string
                    color:
                      type: string
              required:
                - licensePlate
                - phoneNumber
      responses:
        "200":
          description: Successfully recorded vehicle entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntryResponse"
        "409":
          $ref: "#/components/responses/409"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /vehicles/entry/reservation:
    post:
      tags:
        - vehicle
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: (Provider)Record reservation vehicle entry
      description: Records the entry of a vehicle w/c reserved a spot into a parking lot.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: 0912131415
                licensePlate:
                  type: string
                  example: 1AAB45323
                lotId: 
                  type: string
                  format: uuid
              required:
                - licensePlate
                - phoneNumber
      responses:
        "201":
          description: Successfully recorded vehicle entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntryResponse"
        "400":
          $ref: "#/components/responses/400"
        "409":
          $ref: "#/components/responses/409"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /vehicles/exit/walk-in:
    patch:
      tags:
        - vehicle
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: (Provider)Record vehicle exit for a non reservation customer
      description: Records the exit of a vehicle from a parking lot.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  example: 0912131415
                lotId:
                  type: string
                  format: uuid
              required:
                - phoneNumber
      responses:
        "204":
          $ref: "#/components/responses/204"
        "400":
          $ref: "#/components/responses/400"
        "409":
          $ref: "#/components/responses/409"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /vehicles/exit/reservation:
    patch:
      tags:
        - vehicle
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: (Provider)Record vehicle exit for a reservation customer
      description: Records the exit of a vehicle from a parking lot.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  example: 0912131415
      responses:
        "204":
          $ref: "#/components/responses/204"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  # Valet Endpoints - TODO:complete
  /valet/valet-tickets:
    post:
      tags:
        - valet-parking
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: (Provider-Valet)Create a valet ticket
      description: Creates a valet ticket for a vehicle.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicle:
                  type: object
                  properties:
                    make:
                      type: string
                      example: "Toyota"
                    model:
                      type: string
                      example: "Camry"
                    color:
                      type: string
                      example: "Black"
                    licensePlate:
                      type: string
                      example: 1AAB45323
                  required:
                    - licensePlate
                customer:
                  type: object
                  properties:
                    email: 
                      type: string
                      example: custone@gmail.com
                zoneId:
                  type: string
                  format: uuid
      responses:
        "201":
          description: Successfully created valet ticket
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntryResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    get:
      tags:
        - valet-parking
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      summary: (Provider-Valet)Get all valet retrieval requests
      description: Returns all valet retrieval requests.
      responses:
        "200":
          description: Successfully retrieved valet tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EntryTicket"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /valet/valet-tickets/{ticketId}:
    patch:
      tags:
        - valet-parking
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: ticketId
          description: The ID of the valet ticket
          required: true
          schema:
            type: string
            format: uuid
      summary: (Customer)Make a vehicle retreival request
      description: Makes a vehicle retreival request 
      responses:
        "200":
          description: Successfully request
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticketId:
                    type: string
                    example: "12345"
                  vehicleId:
                    type: string
                    example: "67890"
                  valetId:
                    type: string
                    example: "54321"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500" 
  /valet/valet-tickets/{ticketId}/claim:
    patch:
      tags:
        - valet-parking
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: ticketId
          description: The ID of the valet ticket
          required: true
          schema:
            type: string
            format: uuid
      summary: (Provider-Valet)Claim a valet ticket
      description: Claim a valet ticket for a vehicle.
      responses:
        "200":
          description: Successfully accepted valet ticket
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Valet ticket accepted successfully."
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /valet/valet-tickets/{ticketId}/complete:
    patch:
      tags:
        - valet-parking
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
        - in: path
          name: ticketId
          description: The ID of the valet ticket
          required: true
          schema:
            type: string
            format: uuid
      summary: (Provider-Valet)Complete a valet ticket 
      description: Completes a valet ticket for a vehicle. Triggered when the vehicle is returned to the customer.
      responses:
        "200":
          description: Successfully completed valet ticket
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Valet ticket completed successfully."
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  #Analytics Endpoints 
  /analytics/peak-hours:
    get:
      tags:
        - analytics
      summary: Retrieve peak hour data
      description: Returns the peak hour data for parking lots. Only accessible by admins.
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/XClientType"
      responses:
        "200":
          description: Successfully retrieved peak hour data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  peakHour:
                    type: string
                    example: "17:00"
                    description: The peak hour for reservations.
                  totalReservations:
                    type: integer
                    example: 120
                    description: Total number of reservations during the peak hour.
        "403":
          description: Access denied. Only admins can access this resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access denied. Only admins can access this resource."
        "401":
          description: Unauthorized access due to missing or invalid authentication.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized: No authorization header provided."
        "500":
          description: Internal server error while retrieving peak hour data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving peak hour data."
                  error:
                    type: string
                    example: "Database connection failed."
  # /analytics/getActiveReservations
  #   get:
  #     tags:

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
    Provider:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
          example: 0912445578
        email:
          type: string
        hasValet:
          type: boolean
    Employee:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name: 
          type: string
        phone:  
          type: string
          example: 0912445578
        email:
          type: string
        password:
          type: string
          format: password
    GetEmployeesRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name: 
          type: string
        phone:  
          type: string
          example: 0912445578
        email:
          type: string
        role:
          type: string
          enum: [admin, valet]
        lot:
          type: object
          properties:
            id: 
              type: string
              format: uuid
            name:
              type: string
    Customer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email: 
          type: string
    ProviderRegisterRequest:
      type: object
      properties:
        employee: 
          $ref: "#/components/schemas/Employee"
        provider:
          $ref: "#/components/schemas/Provider"
    ProviderRegisterResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        employee:
          type: object
          properties:  
            id:
              type: string
            name:
              type: string
        provider:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
    LotCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: "Parking Lot 1"
        capacity:
          type: integer
          example: 100
        location:
          type: object
          properties:
            latitude:
              type: number
              format: float
              example: 37.7749
            longitude:
              type: number
              format: float
              example: -122.4194
        # images:
        #             type: array
        #             items:
        #               type: string
        #               format: binary
        #               description: The images of the lot
        # spot:
        #   type: object
        #   properties:
        #     name:
        #       type: string
        #       example: "P"
        #     numberOfSpots:
        #       type: integer
        #       example: 1
        #     floor:
        #       type: integer
        #       example: 1
        #     startingNumber:
        #       type: string
        #       nullable: true
        #       example: 1
    ZoneCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: "Taxi"
        capacity:
          type: integer
          example: 10
        vehicleType:
          type: string
          example: "Truck"
          nullable: true
        spot:
          type: object
          properties:
            name:
              type: string
              example: "P"
            numberOfSpots:
              type: integer
              example: 1
            floor:
              type: integer
              default: 0
              example: 0
            startingNumber:
              type: integer
              nullable: true
              default: 1
              example: 1
          required:
            - name
            - numberOfSpots
      required:
        - name
        - capacity
    Lot:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        capacity:
          type: integer
        location:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LotWithDetails:
      allOf:
      - $ref: "#/components/schemas/Lot"
      - type: object
        properties:
          hasValet:
            type: boolean
            example: true
          longitude:
            type: number
            format: float
            example: -122.4194
          latitude:
            type: number
            format: float
            example: 37.7749
    Spot:
      type: array
      items: 
        $ref: "#/components/schemas/SpotObject"
    SpotObject:    
      type: object
      properties:
        id:
          type: string
          example: "12345"
        name:
          type: string
          example: "P1"
        floor:
          type: integer
          example: 1
        zoneId:
          type: string
          example: "12345"
        number:
          type: integer
          example: 1
        status:
          type: string
          enum: [available, occupied, reserved]
          example: "available"
        price:
          type: number
          format: float
          example: 10.50 
        createdAt:
          type: string
          format: date-time
          example: "2021-08-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2021-08-01T12:00:00Z"
        OccupationType:
          type: string
          enum: [NONRESERVATOIN, RESERVATION]
          example: "RESERVATION"
          nullable: true
    Vehicle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        make:
          type: string
        model:
          type: string
        color:
          type: string
        licensePlateNumber:
          type: string
          example: "1AAB45323"
        deletedAt:
          type: string
          format: date-time
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        spotId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        licensePlate:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [COMPLETE, ACTIVE, CANCELLED]
    ReservationDetailsResponse:
      type: object
      properties:
        count:
          type: integer
          example: 6
        reservations:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              startTime:
                type: string
                format: date-time
              endTime:
                type: string
                format: date-time
              arrivalTime:
                type: string
                format: date-time
                nullable: true
              status:
                type: string
                enum: [ACTIVE, CANCELLED, COMPLETE]
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
              cancelledAt:
                type: string
                format: date-time
                nullable: true
              licensePlate:
                type: string
              spotId:
                type: string
                format: uuid
              vehicleId:
                type: string
                format: uuid
              spot:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  floor:
                    type: integer
                  status:
                    type: string
                  zone:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      lot:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          name:
                            type: string
                          provider:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              name:
                                type: string
              vehicle:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  make:
                    type: string
                  model:
                    type: string
                  color:
                    type: string
                  licensePlateNumber:
                    type: string
    ReservationFetchResponse:
      type: object
      properties:
        count: 
          type: integer
          example: 10
        reservations:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Reservation"
              - type: object
                properties:
                  vehicle:
                    $ref: "#/components/schemas/Vehicle"
                  spot: 
                    $ref: "#/components/schemas/SpotObject"
    EntryTicket:
      type: object
      properties:
        id:
          type: string
          format: uuid
        phoneNumber:
          type: string
          example: 0912131415
        licensePlate:
          type: string
          example: 1AAB45323
        vehicleId:
          type: string
          format: uuid
        spotId:
          type: string
          format: uuid
        entryTime:
          type: string
          format: date-time
        exitTime:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, completed, cancelled]
    # VehicleResponse:
    EntryResponse:
      type: object
      properties:
        ticket:
          $ref: "#/components/schemas/EntryTicket"
    Alert:
      type : object
      properties:
         id:
            type: string
            description: Unique identifier for the alert.
         type:
           type: string
           description: Type of the alert.
         createdAt:
           type: string
           format: date-time
           description: Timestamp when the alert was created.
         updatedAt:
           type: string
           format: date-time
           description: Timestamp when the alert was last updated.
         value:
           type: object
           description: JSON object containing additional alert details.
         customerId:
           type: string
           nullable: true
           description: ID of the associated customer (if any).
         vehicleId:
           type: string
           nullable: true
           description: ID of the associated vehicle (if any).
         reservationId:
           type: string
           nullable: true
           description: ID of the associated reservation (if any).
  parameters:
    XClientType:
      name: x-client-type
      in: header
      description: The type of client making the request
      schema:
        type: string
        enum: [provider, customer]
      required: true
  responses:
    "204":
      description: No content
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "400":
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "404":
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "409":
      description: Resouce conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

